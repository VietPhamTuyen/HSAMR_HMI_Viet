package de.amr.plt.rcTestapp.Canvas;

import de.amr.plt.rcTestapp.R;
import de.amr.plt.rcTestapp.R.drawable;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.View;

public class Map_canvas extends View{

	Paint myPaint;
	Bitmap map;
	Bitmap car;
	
	
	 int framesPerSecond = 60;
	 long animationDuration = 10000; // 10 seconds
	 Matrix matrix = new Matrix(); // transformation matrix
	 Path path = new Path();       // your path
	 Paint paint = new Paint();    // your paint
	 long startTime;
	
	public Map_canvas(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		map = BitmapFactory.decodeResource(getResources(), R.drawable.map_hor_v1_2);
		car = BitmapFactory.decodeResource(getResources(), R.drawable.car);

		
        this.startTime = System.currentTimeMillis();
        this.postInvalidate(); 
	   	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		super.onDraw(canvas);
		canvas.drawColor(Color.WHITE);
		//Bitmap b = Bitmap.createBitmap(map, 0, 0, canvas.getWidth(), canvas.getHeight());
		canvas.drawBitmap(map,0, 0, null);
		
		
		
		canvas.drawBitmap(car,canvas.getWidth()/2, canvas.getHeight()/2, null);
		
		 long elapsedTime = System.currentTimeMillis() - startTime;

	        matrix.postRotate(30 * elapsedTime/1000);        // rotate 30° every second
	        matrix.postTranslate(100 * elapsedTime/1000, 0); // move 100 pixels to the right
	        // other transformations...

	        canvas.concat(matrix);        // call this before drawing on the canvas!!

	        canvas.drawPath(path, paint); // draw on canvas

	        if(elapsedTime < animationDuration)
	            this.postInvalidateDelayed( 1000 / framesPerSecond);
		
		
		}

	
	
}